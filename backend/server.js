const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config({ path: './env.config' });

// Log para verificar as variÃ¡veis de ambiente
console.log('VariÃ¡veis de ambiente carregadas:');
console.log('PORT:', process.env.PORT);
console.log('GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? 'Chave configurada' : 'Chave nÃ£o encontrada');

const app = express();
const PORT = process.env.PORT || 3002;

// Middlewares
app.use(helmet());
app.use(cors());
app.use(express.json());

// ConfiguraÃ§Ã£o da API do Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// FunÃ§Ã£o para filtrar perguntas relacionadas ao tema
const isValidTopic = (question) => {
  const techKeywords = [
    'programaÃ§Ã£o', 'javascript', 'python', 'react', 'node', 'html', 'css',
    'banco de dados', 'api', 'frontend', 'backend', 'desenvolvimento',
    'algoritmo', 'estrutura de dados', 'inteligÃªncia artificial', 'machine learning',
    'tecnologia', 'software', 'hardware', 'web', 'mobile', 'app', 'aplicativo',
    'framework', 'biblioteca', 'git', 'github', 'docker', 'cloud', 'aws',
    'azure', 'google cloud', 'devops', 'agile', 'scrum', 'clean code',
    'arquitetura', 'microserviÃ§os', 'rest', 'graphql', 'sql', 'nosql'
  ];
  
  const questionLower = question.toLowerCase();
  return techKeywords.some(keyword => questionLower.includes(keyword));
};

// FunÃ§Ã£o para fazer prompt contextualizado
const createTechPrompt = (userQuestion) => {
  return `VocÃª Ã© um especialista em Tecnologia e ProgramaÃ§Ã£o. Responda a seguinte pergunta de forma clara, didÃ¡tica e tÃ©cnica, focando em aspectos prÃ¡ticos e teÃ³ricos da Ã¡rea de tecnologia e desenvolvimento de software:

Pergunta: ${userQuestion}

ForneÃ§a uma resposta completa, incluindo exemplos quando apropriado, e mantenha o foco em tecnologia, programaÃ§Ã£o, desenvolvimento de software, ou temas relacionados Ã  Ã¡rea de TI.`;
};

// Rotas
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'API funcionando corretamente',
    timestamp: new Date().toISOString()
  });
});

app.post('/api/chat', async (req, res) => {
  try {
    console.log('Recebendo requisiÃ§Ã£o:', req.body);
    const { question } = req.body;

    if (!question) {
      console.log('Erro: Pergunta nÃ£o fornecida');
      return res.status(400).json({
        error: 'Pergunta Ã© obrigatÃ³ria',
        code: 'MISSING_QUESTION'
      });
    }

    if (!process.env.GEMINI_API_KEY) {
      console.log('Erro: Chave da API nÃ£o configurada');
      return res.status(500).json({
        error: 'Chave da API do Gemini nÃ£o configurada',
        code: 'MISSING_API_KEY'
      });
    }

    console.log('Verificando tÃ³pico da pergunta:', question);
    if (!isValidTopic(question)) {
      console.log('Erro: TÃ³pico invÃ¡lido');
      return res.status(400).json({
        error: 'Esta API responde apenas perguntas sobre Tecnologia e ProgramaÃ§Ã£o. Tente perguntas sobre desenvolvimento de software, linguagens de programaÃ§Ã£o, frameworks, bancos de dados, etc.',
        code: 'INVALID_TOPIC'
      });
    }

    const prompt = createTechPrompt(question);
    console.log('Prompt preparado:', prompt);

    let retries = 3;
    let lastError = null;

    while (retries > 0) {
      try {
        console.log('Enviando requisiÃ§Ã£o para o Gemini... (tentativa ' + (4 - retries) + ' de 3)');
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const answer = response.text();
        console.log('Resposta recebida do Gemini');

        if (!answer) {
          throw new Error('Resposta invÃ¡lida da API do Gemini');
        }

        return res.json({
          question,
          answer,
          topic: 'Tecnologia e ProgramaÃ§Ã£o',
          timestamp: new Date().toISOString()
        });
      } catch (error) {
        lastError = error;
        console.error('Erro na tentativa:', error.message);
        
        if (error.message.includes('429') || error.message.includes('quota')) {
          console.log('Limite de requisiÃ§Ãµes atingido. Aguardando 20 segundos...');
          await new Promise(resolve => setTimeout(resolve, 20000)); // Espera 20 segundos
          retries--;
        } else {
          throw error; // Se for outro tipo de erro, nÃ£o tenta novamente
        }
      }
    }

    // Se chegou aqui, todas as tentativas falharam
    throw lastError;

  } catch (error) {
    console.error('Erro detalhado na API:', error);
    console.error('Stack trace:', error.stack);
    
    if (error.message.includes('429') || error.message.includes('quota')) {
      return res.status(429).json({
        error: 'Limite de requisiÃ§Ãµes atingido. Por favor, aguarde alguns minutos e tente novamente.',
        code: 'RATE_LIMIT',
        retryAfter: 20
      });
    }
    
    if (error.response?.status === 400) {
      return res.status(400).json({
        error: 'Pergunta invÃ¡lida ou muito longa',
        code: 'INVALID_REQUEST'
      });
    }

    res.status(500).json({
      error: 'Erro interno do servidor: ' + error.message,
      code: 'INTERNAL_ERROR'
    });
  }
});

// Middleware de tratamento de erros
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: 'Algo deu errado!',
    code: 'INTERNAL_ERROR'
  });
});

// Rota 404
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Rota nÃ£o encontrada',
    code: 'NOT_FOUND'
  });
});

app.listen(PORT, () => {
  console.log(`ðŸš€ Servidor rodando na porta ${PORT}`);
  console.log(`ðŸ“± API Health: http://localhost:${PORT}/api/health`);
  console.log(`ðŸ’¬ Chat Endpoint: http://localhost:${PORT}/api/chat`);
});