const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const axios = require('axios');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middlewares
app.use(helmet());
app.use(cors());
app.use(express.json());

// ConfiguraÃ§Ã£o da API do Gemini
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`;

// FunÃ§Ã£o para filtrar perguntas relacionadas ao tema
const isValidTopic = (question) => {
  const techKeywords = [
    'programaÃ§Ã£o', 'javascript', 'python', 'react', 'node', 'html', 'css',
    'banco de dados', 'api', 'frontend', 'backend', 'desenvolvimento',
    'algoritmo', 'estrutura de dados', 'inteligÃªncia artificial', 'machine learning',
    'tecnologia', 'software', 'hardware', 'web', 'mobile', 'app', 'aplicativo',
    'framework', 'biblioteca', 'git', 'github', 'docker', 'cloud', 'aws',
    'azure', 'google cloud', 'devops', 'agile', 'scrum', 'clean code',
    'arquitetura', 'microserviÃ§os', 'rest', 'graphql', 'sql', 'nosql'
  ];
  
  const questionLower = question.toLowerCase();
  return techKeywords.some(keyword => questionLower.includes(keyword));
};

// FunÃ§Ã£o para fazer prompt contextualizado
const createTechPrompt = (userQuestion) => {
  return `VocÃª Ã© um especialista em Tecnologia e ProgramaÃ§Ã£o. Responda a seguinte pergunta de forma clara, didÃ¡tica e tÃ©cnica, focando em aspectos prÃ¡ticos e teÃ³ricos da Ã¡rea de tecnologia e desenvolvimento de software:

Pergunta: ${userQuestion}

ForneÃ§a uma resposta completa, incluindo exemplos quando apropriado, e mantenha o foco em tecnologia, programaÃ§Ã£o, desenvolvimento de software, ou temas relacionados Ã  Ã¡rea de TI.`;
};

// Rotas
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'API funcionando corretamente',
    timestamp: new Date().toISOString()
  });
});

app.post('/api/chat', async (req, res) => {
  try {
    const { question } = req.body;

    if (!question) {
      return res.status(400).json({
        error: 'Pergunta Ã© obrigatÃ³ria',
        code: 'MISSING_QUESTION'
      });
    }

    if (!GEMINI_API_KEY) {
      return res.status(500).json({
        error: 'Chave da API do Gemini nÃ£o configurada',
        code: 'MISSING_API_KEY'
      });
    }

    // Verificar se a pergunta estÃ¡ relacionada ao tema
    if (!isValidTopic(question)) {
      return res.status(400).json({
        error: 'Esta API responde apenas perguntas sobre Tecnologia e ProgramaÃ§Ã£o. Tente perguntas sobre desenvolvimento de software, linguagens de programaÃ§Ã£o, frameworks, bancos de dados, etc.',
        code: 'INVALID_TOPIC'
      });
    }

    // Preparar o prompt
    const prompt = createTechPrompt(question);

    // Fazer requisiÃ§Ã£o para o Gemini
    const geminiResponse = await axios.post(GEMINI_API_URL, {
      contents: [{
        parts: [{
          text: prompt
        }]
      }]
    }, {
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 30000
    });

    const answer = geminiResponse.data?.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!answer) {
      throw new Error('Resposta invÃ¡lida da API do Gemini');
    }

    res.json({
      question,
      answer,
      topic: 'Tecnologia e ProgramaÃ§Ã£o',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Erro na API:', error.message);
    
    if (error.response?.status === 400) {
      return res.status(400).json({
        error: 'Pergunta invÃ¡lida ou muito longa',
        code: 'INVALID_REQUEST'
      });
    }
    
    if (error.response?.status === 429) {
      return res.status(429).json({
        error: 'Muitas requisiÃ§Ãµes. Tente novamente em alguns segundos.',
        code: 'RATE_LIMIT'
      });
    }

    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

// Middleware de tratamento de erros
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: 'Algo deu errado!',
    code: 'INTERNAL_ERROR'
  });
});

// Rota 404
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Rota nÃ£o encontrada',
    code: 'NOT_FOUND'
  });
});

app.listen(PORT, () => {
  console.log(`ðŸš€ Servidor rodando na porta ${PORT}`);
  console.log(`ðŸ“± API Health: http://localhost:${PORT}/api/health`);
  console.log(`ðŸ’¬ Chat Endpoint: http://localhost:${PORT}/api/chat`);
});